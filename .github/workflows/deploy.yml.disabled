name: Deploy to AWS

on:
  push:
    branches:
      - main
      - production
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: knowledge-database
  ECS_CLUSTER: knowledge-database
  TERRAFORM_VERSION: 1.6.0

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run linting
        run: |
          black --check app/
          isort --check-only app/
          flake8 app/ --max-line-length=120

      - name: Run type checking
        run: mypy app/ --ignore-missing-imports

      - name: Security scan with Bandit
        run: bandit -r app/ -f json -o bandit-report.json || true

      - name: Check dependencies for vulnerabilities
        run: safety check --json > safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          SECRET_KEY: test-secret-key
          OPENSEARCH_URL: http://localhost:9200
        run: |
          pytest tests/ --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            htmlcov/

  # Build and Push Docker Image
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.env.outputs.ENVIRONMENT }}-{{sha}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to ECS
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.ref == 'refs/heads/production' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.service-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
            echo "ECS_SERVICE=knowledge-database-production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
            echo "ECS_SERVICE=knowledge-database-staging" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_OUTPUT
            echo "ECS_SERVICE=knowledge-database-dev" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECR_REPOSITORY }}-${{ steps.env.outputs.ENVIRONMENT }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECR_REPOSITORY }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.env.outputs.ENVIRONMENT }}-${{ github.sha }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.env.outputs.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}-${{ steps.env.outputs.ENVIRONMENT }}
          wait-for-service-stability: true

      - name: Run database migrations
        run: |
          TASK_ARN=$(aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }}-${{ steps.env.outputs.ENVIRONMENT }} \
            --task-definition ${{ env.ECR_REPOSITORY }}-${{ steps.env.outputs.ENVIRONMENT }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRIVATE_SUBNET_IDS }}],securityGroups=[${{ secrets.ECS_SECURITY_GROUP_ID }}],assignPublicIp=DISABLED}" \
            --overrides '{"containerOverrides":[{"name":"'${{ env.ECR_REPOSITORY }}'","command":["alembic","upgrade","head"]}]}' \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "Migration task started: $TASK_ARN"
          
          aws ecs wait tasks-stopped \
            --cluster ${{ env.ECS_CLUSTER }}-${{ steps.env.outputs.ENVIRONMENT }} \
            --tasks $TASK_ARN
          
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }}-${{ steps.env.outputs.ENVIRONMENT }} \
            --tasks $TASK_ARN \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          
          if [ "$EXIT_CODE" != "0" ]; then
            echo "Migration failed with exit code $EXIT_CODE"
            exit 1
          fi
          
          echo "Migration completed successfully"

      - name: Verify deployment
        id: verify
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names ${{ env.ECR_REPOSITORY }}-${{ steps.env.outputs.ENVIRONMENT }}-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          echo "service-url=https://$ALB_DNS" >> $GITHUB_OUTPUT
          
          # Wait for service to be healthy
          for i in {1..30}; do
            if curl -f https://$ALB_DNS/health; then
              echo "Service is healthy"
              break
            fi
            echo "Waiting for service to be healthy... ($i/30)"
            sleep 10
          done

      - name: Send deployment notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ steps.env.outputs.ENVIRONMENT }} ${{ job.status }}
            Service URL: ${{ steps.verify.outputs.service-url }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Infrastructure Updates (Terraform)
  infrastructure:
    name: Update Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./infrastructure/terraform/aws
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=infrastructure/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Plan
        working-directory: ./infrastructure/terraform/aws
        run: |
          terraform plan \
            -var="environment=${{ github.event.inputs.environment }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
        working-directory: ./infrastructure/terraform/aws
        run: terraform apply -auto-approve tfplan

  # Rollback Deployment
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get previous task definition
        run: |
          PREVIOUS_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ env.ECR_REPOSITORY }}-production \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text | awk -F: '{print $NF-1}')
          
          echo "Rolling back to task definition revision: $PREVIOUS_TASK_DEF"

      - name: Update service with previous task definition
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }}-production \
            --service ${{ env.ECR_REPOSITORY }}-production \
            --task-definition ${{ env.ECR_REPOSITORY }}-production:$PREVIOUS_TASK_DEF \
            --force-new-deployment

      - name: Wait for rollback to complete
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }}-production \
            --services ${{ env.ECR_REPOSITORY }}-production

      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Rollback completed for production
            Status: ${{ job.status }}
            Initiated by: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}