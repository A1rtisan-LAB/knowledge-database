name: GPT Code Review v2

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code-review-v2:
    name: GPT Review with Chunking Support
    # Skip if PR is draft or has WIP in title
    if: |
      (github.event_name == 'pull_request' && !github.event.pull_request.draft && !contains(github.event.pull_request.title, 'WIP')) ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/review'))
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install openai PyGithub requests
    
    - name: Get PR details
      id: pr_details
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WORKFLOW_VERSION: "2.0.0"
        DEBUG_MODE: ${{ secrets.DEBUG_MODE || 'false' }}
      run: |
        echo "üöÄ Running GPT Review v2.0.0 with intelligent chunking support"
        if [ "${{ github.event_name }}" = "issue_comment" ]; then
          PR_NUMBER="${{ github.event.issue.number }}"
        else
          PR_NUMBER="${{ github.event.pull_request.number }}"
        fi
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        
        # Get PR diff size
        DIFF_SIZE=$(gh pr diff $PR_NUMBER | wc -l)
        echo "diff_size=$DIFF_SIZE" >> $GITHUB_OUTPUT
        
        # Debug output (only if DEBUG_MODE is enabled)
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "üìä [DEBUG] PR Review Thresholds:"
          echo "  - Chunk activation: 2,000 lines"
          echo "  - Maximum reviewable: 20,000 lines"
        fi
        echo "üìä Current PR size: $DIFF_SIZE lines"
        
        # Check if diff is too large (>20000 lines - chunking will handle it)
        if [ $DIFF_SIZE -gt 20000 ]; then
          echo "skip_reason=PR too large ($DIFF_SIZE lines) - exceeds chunking limit" >> $GITHUB_OUTPUT
          echo "should_skip=true" >> $GITHUB_OUTPUT
        elif [ $DIFF_SIZE -gt 2000 ]; then
          if [ "$DEBUG_MODE" = "true" ]; then
            echo "‚úÖ [DEBUG] Chunking enabled for large PR ($DIFF_SIZE lines)" 
            echo "üì¶ [DEBUG] Will process in ~$(($DIFF_SIZE / 2000 + 1)) chunks"
          fi
          echo "use_chunks=true" >> $GITHUB_OUTPUT
          echo "should_skip=false" >> $GITHUB_OUTPUT
        else
          echo "should_skip=false" >> $GITHUB_OUTPUT
          echo "use_chunks=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check daily limit
      id: check_limit
      run: |
        DATE=$(date +%Y-%m-%d)
        LIMIT_FILE="/tmp/gpt-review-limit-$DATE.txt"
        
        # Check if we've hit daily limit (10 reviews)
        if [ -f "$LIMIT_FILE" ]; then
          COUNT=$(cat "$LIMIT_FILE")
          if [ "$COUNT" -ge 10 ]; then
            echo "Daily limit reached ($COUNT/10)" 
            echo "should_skip=true" >> $GITHUB_OUTPUT
            echo "skip_reason=Daily limit reached (10 reviews)" >> $GITHUB_OUTPUT
          else
            echo $((COUNT + 1)) > "$LIMIT_FILE"
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "1" > "$LIMIT_FILE"
          echo "should_skip=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run GPT Review
      if: steps.pr_details.outputs.should_skip != 'true' && steps.check_limit.outputs.should_skip != 'true'
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ steps.pr_details.outputs.pr_number }}
        USE_CHUNKS: ${{ steps.pr_details.outputs.use_chunks }}
        DEBUG_MODE: ${{ secrets.DEBUG_MODE || 'false' }}
      run: |
        if [ "$DEBUG_MODE" = "true" ]; then
          echo "üîß [DEBUG] GPT Review Configuration:"
          echo "  - Workflow version: 2.0.0"
          echo "  - Chunking enabled: ${USE_CHUNKS:-false}"
          echo "  - PR size: ${{ steps.pr_details.outputs.diff_size }} lines"
        fi
        
        if [ "$USE_CHUNKS" = "true" ]; then
          echo "üì¶ Running chunked review for large PR..."
        else
          echo "üìÑ Running standard review..."
        fi
        python .github/scripts/gpt_review.py
    
    - name: Post skip message
      if: steps.pr_details.outputs.should_skip == 'true' || steps.check_limit.outputs.should_skip == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ steps.pr_details.outputs.pr_number }}
      run: |
        REASON="${{ steps.pr_details.outputs.skip_reason }}${{ steps.check_limit.outputs.skip_reason }}"
        gh pr comment $PR_NUMBER --body "‚è≠Ô∏è **AI Review Skipped**
        
        Reason: $REASON
        
        Note: This PR exceeds the maximum reviewable size (20,000 lines) even with chunking.
        Consider breaking it into smaller PRs for better review quality.
        
        To force a review of the first 20,000 lines, comment \`/review\` on this PR."

  usage-report:
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/usage')
    runs-on: ubuntu-latest
    
    steps:
    - name: Report usage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        DATE=$(date +%Y-%m-%d)
        LIMIT_FILE="/tmp/gpt-review-limit-$DATE.txt"
        
        if [ -f "$LIMIT_FILE" ]; then
          COUNT=$(cat "$LIMIT_FILE")
        else
          COUNT=0
        fi
        
        gh issue comment ${{ github.event.issue.number }} --body "üìä **GPT Review Usage**
        
        Today's usage: $COUNT/10 reviews
        Status: $([ $COUNT -ge 10 ] && echo 'üî¥ Limit reached' || echo 'üü¢ Available')
        
        Reset time: Tomorrow at 00:00 UTC"