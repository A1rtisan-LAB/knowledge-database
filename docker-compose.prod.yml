# Production Docker Compose for M1 Mac
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    platform: linux/arm64
    container_name: kb-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: knowledge_prod
      POSTGRES_USER: ${DB_USER:-kb_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-kb_user} -d knowledge_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kb-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    platform: linux/arm64
    container_name: kb-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kb-network

  # OpenSearch
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    platform: linux/arm64
    container_name: kb-opensearch-prod
    restart: always
    environment:
      - cluster.name=knowledge-cluster
      - node.name=opensearch-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - DISABLE_SECURITY_PLUGIN=true  # 프로덕션에서는 보안 활성화 권장
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kb-network

  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    platform: linux/arm64
    container_name: kb-app-prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-kb_user}:${DB_PASSWORD}@postgres:5432/knowledge_prod
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENSEARCH_HOST=opensearch
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - kb-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    platform: linux/arm64
    container_name: kb-nginx-prod
    restart: always
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/sites:/etc/nginx/sites-enabled:ro
      - ./static:/usr/share/nginx/html/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    networks:
      - kb-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  opensearch_data:
    driver: local

networks:
  kb-network:
    driver: bridge